import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  Alert,
} from 'react-native';
import { commonStyles, colors, typography, spacing, borderRadius, shadows } from '../../styles/theme';

const HomeScreen = ({ navigation }) => {
  // Mock user data
  const user = {
    full_name: 'Nguy·ªÖn VƒÉn A',
    reputation: 100,
    coin_balance: 50,
  };

  const handleLogout = () => {
    Alert.alert(
      'ƒêƒÉng xu·∫•t',
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?',
      [
        { text: 'H·ªßy', style: 'cancel' },
        { text: 'ƒêƒÉng xu·∫•t', style: 'destructive', onPress: () => {
          // Navigate back to LoginScreen
          navigation.navigate('Login');
        }},
      ]
    );
  };

  const menuItems = [
    {
      id: 'map',
      title: 'B·∫£n ƒë·ªì bi·ªÉn b√°o',
      subtitle: 'Xem v·ªã tr√≠ c√°c bi·ªÉn b√°o giao th√¥ng',
      icon: 'üó∫Ô∏è',
      onPress: () => navigation.navigate('Map'),
    },
    {
      id: 'camera',
      title: 'Ch·ª•p ·∫£nh bi·ªÉn b√°o',
      subtitle: 'B√°o c√°o bi·ªÉn b√°o m·ªõi ho·∫∑c s·ª± c·ªë',
      icon: 'üì∏',
      onPress: () => Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn!'),
    },
    {
      id: 'reports',
      title: 'B√°o c√°o c·ªßa t√¥i',
      subtitle: 'Xem l·ªãch s·ª≠ b√°o c√°o',
      icon: 'üìã',
      onPress: () => Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn!'),
    },
    {
      id: 'profile',
      title: 'H·ªì s∆° c√° nh√¢n',
      subtitle: 'Qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n',
      icon: 'üë§',
      onPress: () => navigation.navigate('Profile'),
    },
    {
      id: 'leaderboard',
      title: 'B·∫£ng x·∫øp h·∫°ng',
      subtitle: 'Xem th·ª© h·∫°ng c·ªông ƒë·ªìng',
      icon: 'üèÜ',
      onPress: () => Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn!'),
    },
    {
      id: 'settings',
      title: 'C√†i ƒë·∫∑t',
      subtitle: 'T√πy ch·ªânh ·ª©ng d·ª•ng',
      icon: '‚öôÔ∏è',
      onPress: () => Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn!'),
    },
  ];

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <View>
            <Text style={styles.greeting}>Xin ch√†o!</Text>
            <Text style={styles.userName}>{user?.full_name || 'Ng∆∞·ªùi d√πng'}</Text>
          </View>
          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
            <Text style={styles.logoutText}>ƒêƒÉng xu·∫•t</Text>
          </TouchableOpacity>
        </View>

        {/* Stats Cards */}
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{user?.reputation || 0}</Text>
            <Text style={styles.statLabel}>ƒêi·ªÉm uy t√≠n</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{user?.coin_balance || 0}</Text>
            <Text style={styles.statLabel}>Xu</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>0</Text>
            <Text style={styles.statLabel}>B√°o c√°o</Text>
          </View>
        </View>

        {/* Menu Items */}
        <View style={styles.menuContainer}>
          <Text style={styles.sectionTitle}>Ch·ª©c nƒÉng ch√≠nh</Text>
          {menuItems.map((item) => (
            <TouchableOpacity
              key={item.id}
              style={styles.menuItem}
              onPress={item.onPress}
            >
              <View style={styles.menuItemLeft}>
                <Text style={styles.menuItemIcon}>{item.icon}</Text>
                <View style={styles.menuItemText}>
                  <Text style={styles.menuItemTitle}>{item.title}</Text>
                  <Text style={styles.menuItemSubtitle}>{item.subtitle}</Text>
                </View>
              </View>
              <Text style={styles.menuItemArrow}>‚Ä∫</Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* Quick Actions */}
        <View style={styles.quickActionsContainer}>
          <Text style={styles.sectionTitle}>Thao t√°c nhanh</Text>
          <View style={styles.quickActions}>
            <TouchableOpacity
              style={styles.quickActionButton}
              onPress={() => navigation.navigate('Map')}
            >
              <Text style={styles.quickActionIcon}>üó∫Ô∏è</Text>
              <Text style={styles.quickActionText}>Xem b·∫£n ƒë·ªì</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.quickActionButton}
              onPress={() => Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn!')}
            >
              <Text style={styles.quickActionIcon}>üì∏</Text>
              <Text style={styles.quickActionText}>Ch·ª•p ·∫£nh</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.quickActionButton}
              onPress={() => Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn!')}
            >
              <Text style={styles.quickActionIcon}>üìä</Text>
              <Text style={styles.quickActionText}>Th·ªëng k√™</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    ...commonStyles.container,
  },
  scrollView: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: spacing.lg,
    backgroundColor: colors.primary,
  },
  greeting: {
    fontSize: typography.fontSize.lg,
    color: colors.white,
    opacity: 0.9,
  },
  userName: {
    fontSize: typography.fontSize['2xl'],
    fontWeight: typography.fontWeight.bold,
    color: colors.white,
  },
  logoutButton: {
    padding: spacing.sm,
  },
  logoutText: {
    color: colors.white,
    fontSize: typography.fontSize.sm,
    opacity: 0.9,
  },
  statsContainer: {
    flexDirection: 'row',
    padding: spacing.lg,
    gap: spacing.md,
  },
  statCard: {
    flex: 1,
    backgroundColor: colors.surface,
    padding: spacing.lg,
    borderRadius: borderRadius.lg,
    alignItems: 'center',
    ...shadows.sm,
  },
  statNumber: {
    fontSize: typography.fontSize['2xl'],
    fontWeight: typography.fontWeight.bold,
    color: colors.primary,
    marginBottom: spacing.xs,
  },
  statLabel: {
    fontSize: typography.fontSize.sm,
    color: colors.textSecondary,
  },
  menuContainer: {
    padding: spacing.lg,
  },
  sectionTitle: {
    fontSize: typography.fontSize.lg,
    fontWeight: typography.fontWeight.semiBold,
    color: colors.textPrimary,
    marginBottom: spacing.md,
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: colors.surface,
    padding: spacing.lg,
    borderRadius: borderRadius.lg,
    marginBottom: spacing.sm,
    ...shadows.sm,
  },
  menuItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  menuItemIcon: {
    fontSize: typography.fontSize['2xl'],
    marginRight: spacing.md,
  },
  menuItemText: {
    flex: 1,
  },
  menuItemTitle: {
    fontSize: typography.fontSize.base,
    fontWeight: typography.fontWeight.semiBold,
    color: colors.textPrimary,
    marginBottom: spacing.xs,
  },
  menuItemSubtitle: {
    fontSize: typography.fontSize.sm,
    color: colors.textSecondary,
  },
  menuItemArrow: {
    fontSize: typography.fontSize.xl,
    color: colors.textTertiary,
  },
  quickActionsContainer: {
    padding: spacing.lg,
    paddingTop: 0,
  },
  quickActions: {
    flexDirection: 'row',
    gap: spacing.md,
  },
  quickActionButton: {
    flex: 1,
    backgroundColor: colors.surface,
    padding: spacing.lg,
    borderRadius: borderRadius.lg,
    alignItems: 'center',
    ...shadows.sm,
  },
  quickActionIcon: {
    fontSize: typography.fontSize['2xl'],
    marginBottom: spacing.sm,
  },
  quickActionText: {
    fontSize: typography.fontSize.sm,
    color: colors.textPrimary,
    textAlign: 'center',
  },
});

export default HomeScreen;
